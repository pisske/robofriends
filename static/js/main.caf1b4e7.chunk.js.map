{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/SearchBox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAmBeA,EAhBF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACtB,OACK,yBAAKC,UAAU,uDAEf,yBAAKC,IAAI,OAAMC,IAAG,+BAA0BH,EAA1B,mBACf,6BACG,4BAAKF,GACL,2BAAIC,MCkBJK,EA1BE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGf,OACI,6BAGIA,EAAOC,KAAI,SAACC,EAAKC,GAEb,OAAQ,kBAAC,EAAD,CACPC,IAAKD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCLlBW,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCuBEC,E,kDAxBf,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACLC,UAAS,GAHD,E,8DASCC,EAAMC,GAErBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,0DAEAG,KAAKX,MAAMK,a,GAnBEQ,aCcZC,EAdG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAEhB,OACI,yBAAKzB,UAAU,MACb,2BACAA,UAAU,mCACT0B,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCiDNI,G,uDAjDX,aAAc,IAAD,8BACT,gBAeJC,eAAe,SAACC,GACjB,EAAKT,SAAS,CAACU,YAAYD,EAAME,OAAOC,SAfnC,EAAKjB,MAAM,CACNb,OAAQ,GACR4B,YAAY,IAJR,E,gEASO,IAAD,OACdG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKjB,SAAS,CAAClB,OAAOmC,S,+BAU/B,IAAD,EACyBlB,KAAKJ,MAA3Bb,EADH,EACGA,OAAO4B,EADV,EACUA,YACXQ,EAAcpC,EAAOqC,QAAO,SAAArC,GAC9B,OAAOA,EAAOP,KAAK6C,cAAcC,SAASX,EAAYU,kBAG3D,OAAQtC,EAAOwC,OAIP,yBAAK5C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWyB,aAAcJ,KAAKS,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAU1B,OAAQoC,OARxB,2C,GA9BSjB,cCEEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAGCC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,a","file":"static/js/main.caf1b4e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name,email,id})=>{\r\n    return(\r\n         <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n         \r\n         <img alt=\"robo\"src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n              </div>\r\n          \r\n          </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots})=>{\r\n\r\n\r\n    return(\r\n        <div>\r\n        \r\n        {\r\n            robots.map((user,i)=>{\r\n\r\n                return (<Card\r\n                 key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}/>\r\n            \r\n                );\r\n            })\r\n            \r\n\r\n        }\r\n          </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n          hasError:false\r\n\r\n    }\r\n}\r\n\r\n\r\n componentDidCatch(error,info){\r\n\r\n    this.setState({hasError:true})\r\n }\r\n\r\nrender(){\r\n   if(this.state.hasError){\r\n       return <h1>Ooooops. That is not good </h1>\r\n   }\r\n       return this.props.children\r\n}\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n\r\n    return(\r\n        <div className='p2'>\r\n          <input \r\n          className='pa3 ba b--green bg-lightest-blue'\r\n           type='search' \r\n           placeholder='Search Robots'\r\n           onChange={searchChange}/>\r\n          </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React,{ Component }from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry'\r\n\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n             robots: [],\r\n             searchfield:''\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n         fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(response=>response.json())\r\n         .then(users=>this.setState({robots:users})\r\n         );\r\n        \r\n    }\r\n    onSearchChange=(event)=>{\r\n   this.setState({searchfield:event.target.value})\r\n   \r\n\r\n\r\n    }\r\n    render(){\r\n        const {robots,searchfield} = this.state;\r\n     const filterRobots =robots.filter(robots=>{\r\n         return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n     })\r\n\r\n    return !robots.length ?\r\n         <h1>Loading</h1> :\r\n  \r\n      (\r\n            <div className='tc'>\r\n            <h1 className=\"f2\">RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundry>\r\n               <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n          \r\n          </Scroll>\r\n              </div>\r\n        );\r\n        }\r\n    \r\n  \r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './Containers/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n <App/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}